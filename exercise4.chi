type tote = tuple(real entrytime;
                  int  column);

const real arrive = 70.0,             # inter arrival time of requests
      int  depth  = 55,               # the number of columns
      int  number_of_orders = 10000,  # the number of orders to process
      real lv = 3.0,                  # time to load/unload the vehicle
      real dv = 0.5,                  # unit width clearance
      real vmaxv = 1.5,               # maximum velocity of the vehicle
      real av = 1.0;                  # acceleration/deceleration of the vehicle

proc Generator(chan! tote a):
  dist int d_col =  uniform(0, depth);
  dist real d_arr = exponential(arrive);
  tote x;
  while true:
    x.entrytime = time;
    x.column = sample d_col;
    a!x;
    delay sample d_arr;
  end
end

proc Demand_Buffer(chan? tote a; chan! tote b):
  tote x;
  list tote xs;
  while true:
    select a?x:
      xs = xs + [x]
    alt size(xs)>0, b!xs[0]:
      xs = xs [1:]
    end
  end
end

proc Vehicle(chan? tote a; chan! tote b):
  tote x;
    while true:
    a?x;
        if x.column < 4:
           delay 4*sqrt((dv*(x.column + 1))/av) + 2*lv;
        else:
           delay 2*((2*dv*(x.column + 1)*av)/vmaxv - 2*vmaxv + 2*vmaxv/av) + 2*lv;
        end
    b!x
  end
end

proc Exit(chan? tote a):
  tote x;
  real mphi;
  for i in range(1, number_of_orders + 1):
    a?x;
    mphi = (i - 1) / i * mphi + (time - x.entrytime) / i;
    write("tote = %d; Entrytime = %10.4f; Column = %2d; Mean throughput = %8.6f; Mean flowtime = %6.4f\n",
           i        , x.entrytime       , x.column   , i / time               , mphi );
  end
end

model M():
  chan tote a,b,c;
  run Generator(a), Demand_Buffer(a,b), Vehicle(b,c), Exit(c)
end
