type tote = tuple(real entrytime;
                  int  tier);

const real ll = 2.0,                  # time to load/unload the lift
      int  bc = 1;                    # buffer capacity

proc Generator(chan! tote a):
  list real delays=[1.0, 10.0, 100.0, 100.0];
  while size(delays)>0:
    delay delays[0];
    delays=delays[1:];
    a!(time,0);
    writeln("Generator: Sending tote to Buffer completed at time %3.1f", time)
  end;
  delay(100.0)
end

proc Buffer(chan? tote a; chan! tote b; chan! int c):
  tote x;
  list tote xs;
  int n;
  while true:
    select
      n < bc, a?x:
        xs = xs + [x]; n = n + 1
    alt
      not empty(xs), c!xs[0].tier:
        pass
    alt
      not empty(xs), b!xs[0]:
        xs = xs[1:]; n = n - 1;
    end
  end
end

proc Lift(chan? tote a; chan? int b; chan! tote c):
  tote x;
  while true:
    b?x.tier; delay 23; delay ll;
    a?x; delay 23; delay ll; c!x;
  end
end

proc Exit(chan? tote a):
  tote x;
  while true:
    a?x;
    writeln("Exit:      Receiving tote from Lift completed at time %3.1f",time);
  end
end

model M():
  chan tote a,b,d;
  chan int c;
  run Generator(a), Buffer(a,b,c), Lift(b,c,d), Exit(d)
end
