type tote = tuple(real entrytime;
                  int column;
                  int  tier);

const real lv = 3.0,                   # time to load/unload the vehicle
      real dv = 0.5,                   # unit width clearance
      real vmaxv = 1.5,                # maximum velocity of the vehicle
      real av = 1.0,                   # acceleration/deceleration of the vehicle
      real ll = 2.0,                   # time to load/unload the lift
      real dl = 0.8,                   # unit height clearance
      real vmaxl = 5.0,                # maximum velocity of lift
      real al = 7.0,                   # acceleration/deceleration of lift
      int  bc = 1,                     # buffer capacity
      real arrive = 70.0,              # inter arrival time of requests
      int  Level = 9,                  # the number of tiers
      int  depth  = 55,                # the number of columns
      int  number_of_orders = 100;  # the number of orders to process

proc Generator(chan! tote a; int Tier):
  dist int d_col =  uniform(0, depth);
  dist real d_arr = exponential(arrive);
  tote x;
  while true:
    x.entrytime = time;
    x.column = sample d_col;
    x.tier = Tier;
    a!x;
    delay sample d_arr;
  end
end

proc Demand_Buffer(chan? tote a; chan! tote b):
  tote x;
  list tote xs;
  while true:
    select a?x:
      xs = xs + [x]
    alt size(xs)>0, b!xs[0]:
      xs = xs [1:]
    end
  end
end

proc Vehicle(chan? tote a; chan! tote b):
  tote x;
    while true:
        a?x;
        if x.column < 4:
           delay 4*sqrt((dv*(x.column + 1))/av) + 2*lv;
        else:
           delay 2*(2*vmaxv/av + (dv*(x.column + 1))/vmaxv - vmaxv/av + lv);
        end
        b!x
  end
end

proc Buffer(list(Level) chan? tote a; chan! tote b; chan! int c):
  tote x;
  list tote xs;
  list(Level) int n;
  while true:
    select
      unwind j in range(Level):
        n[j] < bc, a[j]?x:
          xs = xs + [x]; n[j] = n[j] + 1
      end
    alt
      not empty(xs), c!xs[0].tier:
        pass
    alt
      not empty(xs), b!xs[0]:
        n[xs[0].tier] = n[xs[0].tier] - 1; xs = xs[1:];
    end
  end
end

proc Lift(chan? tote a; chan? int b; chan! tote c):
  tote x;
    while true:
        b?x.tier;
        if x.tier < 4:
           delay 2*sqrt((dl*(x.tier + 1))/al) + ll;
        else:
           delay 2*vmaxl/al + (dl*(x.tier + 1))/vmaxl - vmaxl/al + ll;
        end
        a?x;
        if x.tier < 4:
           delay 2*sqrt((dl*(x.tier + 1))/al) + ll;
        else:
           delay 2*vmaxl/al + (dl*(x.tier + 1))/vmaxl - vmaxl/al + ll;
        end
        c!x
  end
end

proc Exit(chan? tote a):
  tote x;
  real sumthrough;
  real sumflow;
  real mphi;
  real varthroughput;
  real varflowtime;
  real avgthroughput;
  real avgflowtime;
  list(number_of_orders) real avgthrough;
  list(number_of_orders) real avgflow;
  list(number_of_orders) real variancesthrough;
  list(number_of_orders) real variancesflow;
  for i in range(1,number_of_orders+1):
    a?x;
    mphi = (i - 1) / i * mphi + (time - x.entrytime) / i;
#     write("tote = %6d; Entrytime = %10.4f; Tier = %2d; Column = %2d; Mean throughput = %8.6f; Mean flowtime = %6.4f\n",
#            i         , x.entrytime       , x.tier    , x.column    , i / time               , mphi );

    avgthrough[i-1] = i/time;
    avgflow[i-1] = mphi;
  end
    avgthroughput = avgthrough[number_of_orders-1];
    avgflowtime      = avgflow[number_of_orders-1];
  for j in range(1,number_of_orders+1):
    variancesthrough [j-1] = (avgthrough[j-1]-avgthroughput)^2;
    variancesflow    [j-1] = (avgflow[j-1] - avgflowtime)^2
  end

    for z in variancesthrough:
    sumthrough = sumthrough + z
    end
    varthroughput = sumthrough/ (number_of_orders-1);


    for y in variancesflow:
    sumflow = sumflow + y
    end
    varflowtime = sumflow/ (number_of_orders-1);


  write("Mean throughput = %8.6f; Std throughput = %8.6f; Lower border = %8.6f; Upper border = %8.6f\nMean flowtime = %6.4f; Std flowtime = %6.4f; Lower border = %8.6f; Upper border = %8.6f\n\n",
                    avgthrough[number_of_orders-1],  sqrt(varthroughput), avgthrough[number_of_orders-1] -2*sqrt(varthroughput), avgthrough[number_of_orders-1] +2*sqrt(varthroughput)
                    , mphi, sqrt(varflowtime), mphi-2* sqrt(varflowtime), mphi+2* sqrt(varflowtime))

end

proc GDV(chan! tote c; int Tier):
  chan tote a,b;
  run Generator(a, Tier), Demand_Buffer(a, b), Vehicle(b, c);
end

proc Model(int q):
  list(Level) chan tote a;
  chan tote b,d;
  chan int c;
  while q>0:
  run
    unwind Tier in range(Level):
      GDV(a[Tier], Tier),
    end,
    Buffer(a,b,c), Lift(b,c,d), Exit(d);
  end
end

model M():
  run
    unwind z in range(1,31):
      Model(z)
  end
end
